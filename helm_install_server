#!/bin/bash -e

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "helm_install_rucio_server"
   echo
   echo "Helm-deploy rucio server"
   echo
   echo "Syntax: helm_install_rucio_server -[h|u <rucio_db_user>|d <rucio_db_name>|p <rucio_db_size>|d <server_deploy_name>]"
   echo "options:"
   echo "-h                         Print this Help."
   echo "-d <server_deploy_name>  Name of rucio database Helm deployment. (default: rucio)"
   echo "-c <server_helm_chart>   Server Helm chart. (default: rucio/rucio-server)"
   echo "-v <server_values_yaml>  Server Helm chart values.yaml. (default: server_values.yaml)"
   echo
}


############################################################
# Main                                                     #
############################################################
namespace="ucsd-rucio"
server_deploy_name="rucio-server"
server_helm_chart="rucio/rucio-server"
server_values_yaml="server_values.yaml"
while getopts "h:n:u:d:c:v:" option; do
   case $option in
      h) # display Help
         Help
         exit;;
      d) # set Deployment name
        server_deploy_name=${OPTARG};;
      c) # server_helm_chart
        server_helm_chart=${OPTARG};;
      v) # server_values.yaml
        server_values_yaml=${OPTARG};;
      \?) 
        Help
        exit;;
   esac
 done

# Check for existing postgres deployment
if helm status ${server_deploy_name} &> /dev/null; then
  echo "Warning: rucio-server deployment: ${server_deploy_name} already exists"
  echo "...Will apply upgrade"
fi

# Check for values.yaml
if [ ! -f ${server_values_yaml} ]; then
  echo "Error: Helm values.yaml file '${server_values_yaml}' not found"
  exit 1
fi


# Create secret for FTS cert
USERCERT=$(base64 -w0 secrets/usercert.pem)
cat << EOF | kubectl -n ${namespace} apply -f -
apiVersion: v1
data:
  usercert.pem: ${USERCERT}
kind: Secret
metadata:
  name: ${server_deploy_name}-fts-cert
type: Opaque
EOF

# Create secret for FTS key
USERKEY=$(base64 -w0 secrets/userkey.pem)
cat << EOF | kubectl -n ${namespace} apply -f -
apiVersion: v1
data:
  new_userkey.pem: ${USERKEY}
kind: Secret
metadata:
  name: ${server_deploy_name}-fts-key
type: Opaque
EOF

# Extract db secrets for server deployment
database_default=$(kubectl -n ${namespace} get secrets rucio-db-init-secrets  -o jsonpath='{.data.rucio-cfg-database-default}' | base64 -d)
schema=$(kubectl -n ${namespace} get secrets rucio-db-init-secrets  -o jsonpath='{.data.rucio-db-schema}' | base64 -d)

### Deploy Helm chart ###
if ! helm status ${server_deploy_name} &> /dev/null; then
  # Helm install rucio server
  echo "Installing Rucio server helm chart:"
  helm -n ${namespace} install ${server_deploy_name} ${server_helm_chart} -f ${server_values_yaml} \
    --set config.database.default=${database_default} --set config.database.schema=${schema} \
    --version 1.30.13
else
  echo "Upgrading Rucio server helm chart:"
  helm -n ${namespace} upgrade ${server_deploy_name} ${server_helm_chart} -f ${server_values_yaml} \
    --set config.database.default=${database_default} --set config.database.schema=${schema} \
    --version 1.30.13
fi